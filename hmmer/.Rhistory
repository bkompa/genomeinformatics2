hist(fitObjects[[3]]$output$seg.mean,breaks=20)
hist(fitObjects[[3]]$output$seg.mean,breaks=200)
hist(fitObjects[[4]]$output$seg.mean,breaks=200)
hist(fitObjects[[5]]$output$seg.mean,breaks=200)
hist(fitObjects[[4]]$output$seg.mean,breaks=200)
?kmeans()
kmeans(fitObjects[[1]])
kmeans(fitObjects[[1]],3)
kmeans(fitObjects[[1]]$output$seg.mean,3)
kmeans(fitObjects[[4]]$output$seg.mean,3)
source('C:/Mack/Cambridge Fall 2017/Functional Genomics/Assignment1/Simulation.R', echo=TRUE)
plot(accValues,percentCorrect)
debugSource('C:/Mack/Cambridge Fall 2017/Functional Genomics/Assignment1/Simulation.R', echo=TRUE)
debugSource('C:/Mack/Cambridge Fall 2017/Functional Genomics/Assignment1/Simulation.R', echo=TRUE)
debugSource('C:/Mack/Cambridge Fall 2017/Functional Genomics/Assignment1/Simulation.R', echo=TRUE)
debugSource('C:/Mack/Cambridge Fall 2017/Functional Genomics/Assignment1/Simulation.R', echo=TRUE)
lapply(currentObjects,function(x) x$percentFound)
unlist(lapply(currentObjects,function(x) x$percentFound))
debugSource('C:/Mack/Cambridge Fall 2017/Functional Genomics/Assignment1/Simulation.R', echo=TRUE)
View(percentCorrect)
View(percentFound)
source('C:/Mack/Cambridge Fall 2017/Functional Genomics/Assignment1/Simulation.R', echo=TRUE)
source('C:/Mack/Cambridge Fall 2017/Functional Genomics/Assignment1/Simulation.R', echo=TRUE)
source('C:/Mack/Cambridge Fall 2017/Functional Genomics/Assignment1/Simulation.R', echo=TRUE)
stopCluster(cl)
source('C:/Mack/Cambridge Fall 2017/Functional Genomics/Assignment1/Simulation.R', echo=TRUE)
debugSource('C:/Mack/Cambridge Fall 2017/Functional Genomics/Assignment1/FG1_Simulation.R', echo=TRUE)
plot(DNACopyOutput$output$seg.mean)
source('C:/Mack/Cambridge Fall 2017/Functional Genomics/Assignment1/FG1_Simulation.R', echo=TRUE)
source('C:/Mack/Cambridge Fall 2017/Functional Genomics/Assignment1/FG1_Simulation.R', echo=TRUE)
source('C:/Mack/Cambridge Fall 2017/Functional Genomics/Assignment1/FG1_Simulation.R', echo=TRUE)
probesPos <-  currentObjects[[1]]$probesPos
probesPos[1]
probesPos[61]
probesPos[62]
sum(DNACopyOutput$output$num.mark)
sum(currentObjects[[1]]$fitObjects$output$num.mark)
currentObjects[[1]]$fitObjects$output$num.mark
currentObjects[[1]]
currentObjects$fitObject
currentObjects$fitobject
currentObjects[1]$fitObject
unlist(currentObjects)$fitObject
RunSimulation <- function(errSd){
FindAccuracy <- function(Y,DNACopyOutput,probesPos){
FindTranstionsPoints <- function(Y){
transPoints <- c()
for (i in 1:(length(Y) - 1)){
if (Y[i] != Y[i+1]){
transPoints <- c(transPoints,i+1) #Start starting pos of probes
}
}
return(c(1,transPoints)) #Probe 1 is always included in DNACopy
}
realTransPoints <- probesPos[FindTranstionsPoints(Y)]
outputTransPoints <- DNACopyOutput$output$loc.start
percentFound <- length(intersect(realTransPoints,outputTransPoints))/length(realTransPoints)
percentCorrect <- length(intersect(realTransPoints,outputTransPoints))/length(outputTransPoints)
return(list(percentFound = percentFound,percentCorrect = percentCorrect))
}
chrLength <- 200000000
nProbes <- 30000
singleProbeLength <- floor(chrLength / nProbes)
pL <- 0.25
pN <- 0.5
pG <- 0.25
Ll <- 30
LG <- 30
LN <- 40
currentStartPos <- 1
probesPosList <- vector(mode="list",length=nProbes)
YList <- vector(mode="list",length=nProbes)
firstProbes <- c()
counter <- 1
while(nProbes > 0){
currentAltType <- sample(x=c(1,2,3),size=1,prob=c(pL,pN,pG))
currentLength <- c(Ll,LN,LG)[currentAltType]
currentNumProbes <- rpois(1,currentLength)
currentProbesPos <- sample(seq(from = currentStartPos,to = currentStartPos + singleProbeLength*(currentNumProbes-1) -1)
,size=currentNumProbes,replace = FALSE)
probesPosList[counter] <- list(sort(currentProbesPos,decreasing = F))
YList[counter] <- list(rep(currentAltType,currentNumProbes))
currentStartPos <- currentStartPos + currentNumProbes*singleProbeLength
nProbes <- nProbes - currentNumProbes
counter <- counter + 1
}
probesPos <- unlist(probesPosList)[1:30000]
Y <- unlist(YList)[1:30000]
X <- sapply(Y,function(y) log(y/2,2) + rnorm(1,mean = 0,sd=errSd))
library(DNAcopy)
CNA.object <- CNA(genomdat=X,chrom=rep(1,length(X)),maploc=probesPos,data.type="logratio")
smoothed.CNA.object <- smooth.CNA(CNA.object)
segment.smoothed.CNA.object <- segment(smoothed.CNA.object,verbose=1)
sdundo.CNA.object <- segment(smoothed.CNA.object,undo.splits="sdundo",undo.SD=3,verbose=1)
acc <- FindAccuracy(Y,sdundo.CNA.object,probesPos)
return(c(acc,list(fitObject = sdundo.CNA.object,probesPos = probesPos,Y = Y, X = X)))
}
RunSimulation(0)
result <- RunSimulation(0)
sum(result$fitObject$output$num.mark)
result <- RunSimulation(0.4)
sum(result$fitObject$output$num.mark)
FindRMSD <- function(Y,DNACopyOutput,probesPos){
numInSeg <- DNACopyOutput$output$num.mark
segMeans <- DNACopyOutput$output$seg.mean
startProbeNum <- 1
squaredDiff <- 0
for (i in 1:length(segMeans)){
endProbeNum <- startProbeNum + numInSeg[i] - 1
YSegment <- Y[startProbeNum:endProbeNum]
currentSquaredDiff <- (YSegment - segMeans[i])^2
squaredDiff <- squaredDiff + sum(currentSquaredDiff)
startProbeNum <- startProbeNum + numInSeg[i]
}
return(sqrt(squaredDiff/length(Y)))
}
FindRMSD(result$Y,result$fitObject,result$probesPos)
debugSource('C:/Mack/Cambridge Fall 2017/Functional Genomics/Assignment1/FG1_Simulation.R', echo=TRUE)
FindRMSD(result$Y,result$fitObject,result$probesPos)
debugSource('C:/Mack/Cambridge Fall 2017/Functional Genomics/Assignment1/FG1_Simulation.R', echo=TRUE)
FindRMSD(result$Y,result$fitObject,result$probesPos)
FindRMSD(result$Y,result$fitObject,result$probesPos)
numInSeg[i]
numInSeg <- DNACopyOutput$output$num.mark
numInSeg
result <- RunSimulation(0)
FindRMSD(result$Y,result$fitObject,result$probesPos)
probesPos[startProbeNum]
FindRMSD(result$Y,result$fitObject,result$probesPos)
source('C:/Mack/Cambridge Fall 2017/Functional Genomics/Assignment1/FG1_Simulation.R', echo=TRUE)
plot(rmsd)
plot(accValues,rmsd)
RunSimulation(0.4)
probesPos
plot(YSegment)
plot(currentSquaredDiff)
RunSimulation(0.2)
plot(YSegment)
lines(rep(segMeans[i],length(YSegment)))
lines(rep(segMeans[i],length(numInSeg[i])))
debugSource('C:/Mack/Cambridge Fall 2017/Functional Genomics/Assignment1/FG1_Simulation.R', echo=TRUE)
debugSource('C:/Mack/Cambridge Fall 2017/Functional Genomics/Assignment1/FG1_Simulation.R', echo=TRUE)
RunSimulation(0.3)
source('C:/Mack/Cambridge Fall 2017/Functional Genomics/Assignment1/FG1_Simulation.R', echo=TRUE)
dir()
source('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
source('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
setwd("C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer")
source('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
table[1]
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
?strsplit
line
line
strsplit(line[1],' ')
?mapply
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
splitLines
splitLines <- unlist(mapply(strsplit,currentLines,' '))
splitLines[1]
test <- splitLines[1]
test <- splitLines[[1]]
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
splitLines
splitLines[[1]]
grepl(splitLines[[1]],"")
test <- grepl(splitLines[[1]],"")
grepl(splitLines[[1]],"")
grepl(splitLines[[1]]," ")
currentLine <- splitLines[[1]]
grepl(currentLine,"")
?grepl
grepl(currentLine[1],"")
grepl(currentLine[2],"")
grepl(currentLine[3],"")
mapply(grepl,currentLine,"")
test <- mapply(grepl,currentLine,"")
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
currentLine
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
currentLine
splitLines
?vector
?paste
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
currentLine
currentLine[10:12]
paste(currentLine[10:12])
test <- paste(currentLine[10:12])
?rbind
rbind(currentLine[10:12])
test <- rbind(currentLine[10:12])
paste(currentLine[10),collaspe="")
paste(currentLine[10],collaspe="")
paste(currentLine[10],collaspe=" ")
paste(currentLine[10:12],collaspe=" ")
paste(currentLine[10:12],collaspe="")
paste(currentLine[10:12],collapse=" ")
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
domEVal[1]
domEVal[1]
as.integer(domEVal[1])
as.integer(fullSeqScore)
as.integer(fullSeqScore[1])
as.numeric(domEVal[1])
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
test <- data.frame(a=c(1,2),b=c(2,3))
test
cbind(test,test)
rbind(test,test)
?data.frame
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
currentLine
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
currentLine
!mapply(grepl,currentLine,"")
!mapply(grepl,currentLine,"")
mapply(gsub,currentLine,"(","\\(")
grepl('Enoyl-(Acyl',"")
grepl('Enoyl-\\(Acyl',"")
?gsub
sub("(","\\C",'(Acyl')
sub("\\(","\\C",'(Acyl')
sub("\\(","\\(",'(Acyl')
grepl(sub("\\(","\\(",'(Acyl'),"")
grepl('Enoyl-\\(Acyl',"",fixed = T)
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
currentLine
domDescrip[2]
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
rbind(result,currentResult)
View(result)
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
queries
data[15]
strplit(queries[1]," ")
strsplit(queries[1]," ")
queries[1]
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
quries
queries[1]
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
currentQuery
currentQuery <- currentQuery[!grepl(currentQuery,"")]
currentQuery
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
currentQuery
!grepl(currentQuery,"")
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
currentQuery
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
currentQuery
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
currentQuery
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
unlist(currentQuery)
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
currentQuery
currentQuer[2]
currentQuery[2]
currentQuery[3]
gsbu("\["currentQuery[3],"")
sub("\["currentQuery[3],"")
sub("\\["currentQuery[3],"")
sub("\[","",currentQuer[3])
sub("=","",currentQuer[3])
sub("=","",currentQuery[3])
sub("\D","",currentQuery[3])
gsub("\D","",currentQuery[3])
gsub("\D","",currentQuery[3],perl=T)
gsub("(\D)","",currentQuery[3],perl=T)
gsub("\[","",currentQuery[3],perl=T)
gsub("=","",currentQuery[3],perl=T)
gsub("[=","",currentQuery[3],perl=T)
gsub("\\[=","",currentQuery[3],perl=T)
gsub("\\[L","",currentQuery[3],perl=T)
gsub("\\[L=","",currentQuery[3],perl=T)
gsub("\\[L=]","",currentQuery[3],perl=T)
gsub("\\[L=","",currentQuery[3])
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
currentResult
source('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
ParseHMMScanFile('d.erecta.out')
source('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
ParseHMMScanFile('d.erecta.out')
source('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
ParseHMMScanFile('d.erecta.out')
ParseHMMScanFile('d.erecta.out')
source('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
ParseHMMScanFile('d.erecta.out')
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
ParseHMMScanFile('d.erecta.out')
length(splitLines)
splitLines
queries[14]
regexpr("\d","[No")
regexpr("\d","[No",fixed=T)
regexpr("\\d","[No",fixed=T)
grepl("\\d","[No",fixed=T)
grepl("\d","[No",fixed=T)
grepl("\\d","[No",fixed=T)
grepl("\\d","1",fixed=T)
regexpr("[1-9]","1")
gregexpr("[1-9]","1")
gregexpr("[1-9]","No")
gregexpr("\d{1,}","No")
gregexpr('\d{1,}',"No")
regexpr('\d{1,}',"No")
gregexpr("[1-9]{1,}","No")
gregexpr("[1-9]{1,}","1")
gregexpr("[1-9]{1,}","2")
gregexpr("[1-9]{1,}","23")
gregexpr("[1-9]{1,}","24")
gregexpr("[1-9]","")
test <- gregexpr("[1-9]","")
tet
test
test[1]
test[[1]]
test <- regexpr("[1-9]","")
test <- regexpr("[1-9]","1")
test
test <- regexpr("[1-9]","12")
test <- regexpr("[1-9]","N")
test <- regexpr("[1-9]","LO!@")
test <- regexpr("[1-9]","90")
?any
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
ParseHMMScanFile('d.erecta.out')
mapply(regexpr,"[1-9]",currentLine)
test <- mapply(regexpr,"[1-9]",currentLine)
print(test)
currentLine
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
ParseHMMScanFile('d.erecta.out')
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
ParseHMMScanFile('d.erecta.out')
mapply(regexpr,"[0-9]",currentLine)
currentLine
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
ParseHMMScanFile('d.erecta.out')
currentLine
currentLine
splitLines[[j]]
splitLines
mapply(regexpr,"[0-9]",splitLines)
splitLines
splitLines[[1]]
splitLines[]
splitLines
splitLines[[[1]]]
splitLines[[1]]
length(splitLines)
length(splitLines[[1]])
source('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
ParseHMMScanFile('d.erecta.out')
source('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
ParseHMMScanFile('d.erecta.out')
length(queries)
splitLines
source('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
ParseHMMScanFile('d.erecta.out')
ParseHMMScanFile('d.erecta.out')
length(queries)
length(header)
length(footer)
d.erecta <- ParseHMMScanFile('d.erecta.out')
d.erecta <- ParseHMMScanFile('d.erecta.out')
d.erecta <- ParseHMMScanFile('d.erecta.out')
do.cal('a=1')
do.cal;('a=1')
do.call('a=1')
eval('a=1')
eval(parse('a=1'))
eval(parse(text='a=1'))
?save
source('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
ParseHMMScanFile('d.erecta.out')
View(d.erecta)
ParseHMMScanFile('d.mojavensis.out')
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
ParseHMMScanFile('d.mojavensis.out')
length(queries)
length(queries)
load('d.erecta.out.dat')
length(unique(d.erecta$qID))
ParseHMMScanFile('d.erecta.out')
eval(paste0('save(',filePath,',file=',filePath,'.dat)'))
str = paste0('save(',filePath,',file=',filePath,'.dat)')
str
str = paste0('save(',filePath,','"file="',filePath,'.dat)')
str = paste0('save(',filePath,','file=','\',filePath,'.dat\'','')')
str = paste0('save(',filePath,'file=','\',filePath,'.dat\'','')')
str = paste0('save(',filePath,'file=','\\',filePath,'.dat\\'','')')
str = paste0('save(',filePath,'file=','\\',filePath,'.dat\\'','')')
str = paste0("save(",filePath,",file=","\',filePath,".dat\'",")")
str = paste0("save\(",filePath,",file=","\',filePath,".dat\'","\)")
str = paste0("save\\(",filePath,",file=","\',filePath,".dat\'","\\)")
str = paste0("save\(")
str = paste0("save(")
str
str = paste0("save(",filePath)
str
str = paste0("save(",filePath,",file=")
str
str = paste0("save(",filePath,",file=",filePath)
str
str = paste0("save(",filePath,",file=\'",filePath)
str
str = paste0("save(",filePath,",file=\'",filePath,".dat\'")
str
str = paste0("save(",filePath,",file=\'",filePath,".dat\')")
str
eval(str)
eval(parse(text=str))
str = paste0("save(",filePath,",file=\'",filePath,".dat\')")
eval(parse(text=str))
remove(d.erecta.out)
load('d.ereacta.out.dat')
load('d.erecta.out')
load('d.erecta.out.dat')
remove(d.erecta)
remove(d.erecta.out)
remove(a)
ParseHMMScanFile('d.mojanvensis.out')
ParseHMMScanFile('d.mojavensis.out')
load('d.mojavensis.out.dat')
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
load('d.mojavensis.out.dat')
ParseHMMScanFile('d.mojavensis.out')
View(result)
splitLines
queries[1]
grep(pattern="--- full sequence ---",data)
data[grep(pattern="--- full sequence ---",data)][1]
data[grep(pattern="--- full sequence ---",data)+1][1]
data[grep(pattern="--- full sequence ---",data)+2][1]
data[grep(pattern="--- full sequence ---",data)+3][1]
ParseHMMScanFile('d.mojavensis.out')
data[header[i]]
data[header[i]-1]
data[header[i]-2]
data[header[i]-4]
data[header[i]-3]
data[header[i]-1]
data[header[i]]
data[header[i]:footer[i]]
header[i]
footer[i]
data[header[i]]
data[footer[i]]
header[i]
ParseHMMScanFile('d.mojavensis.out')
header[i]
data[header[i]]
data[footer[i]]
data[footer[i]]
data[header[i]]
data[header[i]]
data[header[i]]
ParseHMMScanFile('d.mojavensis.out')
load('d.mojavensis.out.dat')
View(d.mojavensis.out)
ParseHMMScanFile('d.mojavensis.out')
data[578]
data[577]
data[575]
data[578]
data[579]
data[580]
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
ParseHMMScanFile('d.mojavensis.out')
data[578]
load('d.mojavensis.out.dat')
View(d.mojavensis.out)
View(d.sechellia.out)
ParseHMMScanFile('d.sechellia.out')
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
source('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
ParseHMMScanFile('d.sechellia.out')
ParseHMMScanFile('d.simulans.out')
ParseHMMScanFile('d.mojavensis.out')
length(queries)
length(header)
length(footer)
debugSource('C:/Mack/Cambridge Fall 2017/Genome Informatics/Assignment2/genomeinformatics2/hmmer/hmmscan_parse.R', echo=TRUE)
ParseHMMScanFile('d.mojavensis.out')
length(footer)
data[578]
data[578-3]
data[578]
data[579]
data[580]
data[581]
data[577]
data[576]
data[578]
data[579]
data[580]
data[581]
which(queries=="")
which(queries==data[578])
data[582]
data[583]
data[584]
